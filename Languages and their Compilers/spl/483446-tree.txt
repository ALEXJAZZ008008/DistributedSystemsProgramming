--02/12/2016----------------------------------------------------- 
Lexical Tokens for a.spl 
-- 6:43:28.13----------------------------------------------------- 
Identifier: IDENTIFIER ProgA
Separator: COLON
Keyword: CODE
Keyword: WRITE
Separator: OPEN_BRACKET
Constant: CHARACTER_CONSTANT h
Separator: COMMA
Constant: CHARACTER_CONSTANT e
Separator: COMMA
Constant: CHARACTER_CONSTANT l
Separator: COMMA
Constant: CHARACTER_CONSTANT l
Separator: COMMA
Constant: CHARACTER_CONSTANT o
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: NEWLINE
Keyword: ENDP
Identifier: IDENTIFIER ProgA
Separator: FULL_STOP
--02/12/2016----------------------------------------------------- 
Lexical Tokens for b.spl 
-- 6:43:31.02----------------------------------------------------- 
Identifier: IDENTIFIER ProgB
Separator: COLON
Keyword: DECLARATIONS
Identifier: IDENTIFIER a
Separator: COMMA
Identifier: IDENTIFIER b
Keyword: OF
Keyword: TYPE_L
Keyword: INTEGER
Separator: SEMICOLON
Identifier: IDENTIFIER c
Keyword: OF
Keyword: TYPE_L
Keyword: CHARACTER
Separator: SEMICOLON
Identifier: IDENTIFIER d
Separator: COMMA
Identifier: IDENTIFIER e
Keyword: OF
Keyword: TYPE_L
Keyword: REAL
Separator: SEMICOLON
Keyword: CODE
Keyword: READ
Separator: OPEN_BRACKET
Identifier: IDENTIFIER a
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: READ
Separator: OPEN_BRACKET
Identifier: IDENTIFIER b
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: IF
Identifier: IDENTIFIER a
Operator: GREATER_THAN
Identifier: IDENTIFIER b
Keyword: THEN
Keyword: WRITE
Separator: OPEN_BRACKET
Constant: CHARACTER_CONSTANT A
Separator: CLOSE_BRACKET
Keyword: ELSE
Keyword: WRITE
Separator: OPEN_BRACKET
Constant: CHARACTER_CONSTANT B
Separator: CLOSE_BRACKET
Keyword: ENDIF
Separator: SEMICOLON
Keyword: NEWLINE
Separator: SEMICOLON
Keyword: READ
Separator: OPEN_BRACKET
Identifier: IDENTIFIER d
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Identifier: IDENTIFIER d
Operator: ASTERIX
Constant: REAL_NUMBER 2.3
Operator: HYPHEN_GREATER_THAN
Identifier: IDENTIFIER e
Separator: SEMICOLON
Keyword: WRITE
Separator: OPEN_BRACKET
Identifier: IDENTIFIER e
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: NEWLINE
Separator: SEMICOLON
Keyword: READ
Separator: OPEN_BRACKET
Identifier: IDENTIFIER c
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: WRITE
Separator: OPEN_BRACKET
Identifier: IDENTIFIER c
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: NEWLINE
Keyword: ENDP
Identifier: IDENTIFIER ProgB
Separator: FULL_STOP
--02/12/2016----------------------------------------------------- 
Lexical Tokens for c.spl 
-- 6:43:34.20----------------------------------------------------- 
Identifier: IDENTIFIER Prog3
Separator: COLON
Keyword: DECLARATIONS
Identifier: IDENTIFIER a
Keyword: OF
Keyword: TYPE_L
Keyword: INTEGER
Separator: SEMICOLON
Keyword: CODE
Keyword: FOR
Identifier: IDENTIFIER a
Keyword: IS
Constant: NUMBER 1
Keyword: BY
Constant: NUMBER 1
Keyword: TO
Constant: NUMBER 13
Keyword: DO
Keyword: IF
Keyword: NOT
Identifier: IDENTIFIER a
Operator: EQUAL
Constant: NUMBER 7
Keyword: THEN
Keyword: WRITE
Separator: OPEN_BRACKET
Identifier: IDENTIFIER a
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: NEWLINE
Keyword: ENDIF
Keyword: ENDFOR
Separator: SEMICOLON
Constant: NUMBER 0
Operator: HYPHEN_GREATER_THAN
Identifier: IDENTIFIER a
Separator: SEMICOLON
Keyword: DO
Identifier: IDENTIFIER a
Operator: PLUS
Constant: NUMBER 1
Operator: HYPHEN_GREATER_THAN
Identifier: IDENTIFIER a
Separator: SEMICOLON
Keyword: IF
Keyword: NOT
Identifier: IDENTIFIER a
Operator: EQUAL
Constant: NUMBER 6
Keyword: AND
Identifier: IDENTIFIER a
Operator: LESS_THAN_GREATER_THAN
Constant: NUMBER 8
Keyword: THEN
Keyword: WRITE
Separator: OPEN_BRACKET
Identifier: IDENTIFIER a
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: NEWLINE
Keyword: ENDIF
Keyword: WHILE
Identifier: IDENTIFIER a
Operator: LESS_THAN
Constant: NUMBER 14
Keyword: ENDDO
Separator: SEMICOLON
Constant: NUMBER 0
Operator: HYPHEN_GREATER_THAN
Identifier: IDENTIFIER a
Separator: SEMICOLON
Keyword: WHILE
Identifier: IDENTIFIER a
Operator: LESS_THAN
Constant: NUMBER 12
Keyword: DO
Keyword: WRITE
Separator: OPEN_BRACKET
Identifier: IDENTIFIER a
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Identifier: IDENTIFIER a
Operator: PLUS
Constant: NUMBER 1
Operator: HYPHEN_GREATER_THAN
Identifier: IDENTIFIER a
Keyword: ENDWHILE
Separator: SEMICOLON
Keyword: NEWLINE
Keyword: ENDP
Identifier: IDENTIFIER Prog3
Separator: FULL_STOP
--02/12/2016----------------------------------------------------- 
Lexical Tokens for d.spl 
-- 6:43:36.43----------------------------------------------------- 
Identifier: IDENTIFIER Prog4D
Separator: COLON
Keyword: DECLARATIONS
Identifier: IDENTIFIER r1
Separator: COMMA
Identifier: IDENTIFIER r2
Separator: COMMA
Identifier: IDENTIFIER r3
Keyword: OF
Keyword: TYPE_L
Keyword: REAL
Separator: SEMICOLON
Keyword: CODE
Operator: HYPHEN
Constant: REAL_NUMBER 2.4
Operator: HYPHEN_GREATER_THAN
Identifier: IDENTIFIER r1
Separator: SEMICOLON
Operator: HYPHEN
Constant: REAL_NUMBER 34.989
Operator: HYPHEN_GREATER_THAN
Identifier: IDENTIFIER r2
Separator: SEMICOLON
Identifier: IDENTIFIER r1
Operator: ASTERIX
Identifier: IDENTIFIER r2
Operator: FORWARD_SLASH
Constant: REAL_NUMBER 7.4
Operator: HYPHEN_GREATER_THAN
Identifier: IDENTIFIER r3
Separator: SEMICOLON
Keyword: WRITE
Separator: OPEN_BRACKET
Identifier: IDENTIFIER r3
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: NEWLINE
Separator: SEMICOLON
Keyword: READ
Separator: OPEN_BRACKET
Identifier: IDENTIFIER r1
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Identifier: IDENTIFIER r1
Operator: PLUS
Identifier: IDENTIFIER r3
Operator: HYPHEN_GREATER_THAN
Identifier: IDENTIFIER r3
Separator: SEMICOLON
Keyword: WRITE
Separator: OPEN_BRACKET
Identifier: IDENTIFIER r3
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: NEWLINE
Keyword: ENDP
Identifier: IDENTIFIER Prog4D
Separator: FULL_STOP
--02/12/2016----------------------------------------------------- 
Lexical Tokens for e.spl 
-- 6:43:37.85----------------------------------------------------- 
Identifier: IDENTIFIER ProgV
Separator: COLON
Keyword: DECLARATIONS
Identifier: IDENTIFIER integer
Separator: COMMA
Identifier: IDENTIFIER i
Keyword: OF
Keyword: TYPE_L
Keyword: INTEGER
Separator: SEMICOLON
Keyword: CODE
Keyword: READ
Separator: OPEN_BRACKET
Identifier: IDENTIFIER integer
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: IF
Identifier: IDENTIFIER integer
Operator: LESS_THAN_EQUAL
Constant: NUMBER 5
Keyword: OR
Identifier: IDENTIFIER integer
Operator: GREATER_THAN_EQUAL
Constant: NUMBER 12
Keyword: THEN
Keyword: WRITE
Separator: OPEN_BRACKET
Identifier: IDENTIFIER integer
Separator: CLOSE_BRACKET
Keyword: ENDIF
Separator: SEMICOLON
Keyword: WRITE
Separator: OPEN_BRACKET
Separator: OPEN_BRACKET
Constant: NUMBER 36
Operator: HYPHEN
Constant: NUMBER 1
Separator: CLOSE_BRACKET
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: NEWLINE
Separator: SEMICOLON
Keyword: FOR
Identifier: IDENTIFIER integer
Keyword: IS
Operator: HYPHEN
Constant: NUMBER 1
Keyword: BY
Operator: HYPHEN
Constant: NUMBER 1
Keyword: TO
Operator: HYPHEN
Constant: NUMBER 5
Keyword: DO
Keyword: WRITE
Separator: OPEN_BRACKET
Identifier: IDENTIFIER integer
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: NEWLINE
Keyword: ENDFOR
Separator: SEMICOLON
Operator: HYPHEN
Constant: NUMBER 1
Operator: HYPHEN_GREATER_THAN
Identifier: IDENTIFIER i
Separator: SEMICOLON
Keyword: FOR
Identifier: IDENTIFIER integer
Keyword: IS
Identifier: IDENTIFIER i
Operator: ASTERIX
Identifier: IDENTIFIER i
Operator: ASTERIX
Identifier: IDENTIFIER i
Keyword: BY
Identifier: IDENTIFIER i
Operator: ASTERIX
Identifier: IDENTIFIER i
Operator: ASTERIX
Identifier: IDENTIFIER i
Operator: ASTERIX
Identifier: IDENTIFIER i
Operator: ASTERIX
Identifier: IDENTIFIER i
Keyword: TO
Identifier: IDENTIFIER i
Operator: ASTERIX
Identifier: IDENTIFIER i
Operator: ASTERIX
Separator: OPEN_BRACKET
Identifier: IDENTIFIER i
Operator: PLUS
Identifier: IDENTIFIER i
Operator: PLUS
Identifier: IDENTIFIER i
Operator: PLUS
Identifier: IDENTIFIER i
Operator: PLUS
Identifier: IDENTIFIER i
Separator: CLOSE_BRACKET
Keyword: DO
Keyword: WRITE
Separator: OPEN_BRACKET
Identifier: IDENTIFIER integer
Separator: CLOSE_BRACKET
Separator: SEMICOLON
Keyword: NEWLINE
Keyword: ENDFOR
Keyword: ENDP
Identifier: IDENTIFIER ProgV
Separator: FULL_STOP
--02/12/2016----------------------------------------------------- 
Parse debug output for a.spl 
-- 6:43:41.17----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token CODE ()
Shifting token CODE ()
Entering state 5
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 8
Reducing stack by rule 51 (line 359):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 18 50
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 18 50
Entering state 79
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 99
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 8
Reducing stack by rule 51 (line 359):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 18 50 79 99
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 18 50 79 99
Entering state 79
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 99
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 8
Reducing stack by rule 51 (line 359):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 18 50 79 99 79 99
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 18 50 79 99 79 99
Entering state 79
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 99
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 8
Reducing stack by rule 51 (line 359):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 18 50 79 99 79 99 79 99
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 18 50 79 99 79 99 79 99
Entering state 79
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 99
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 8
Reducing stack by rule 51 (line 359):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 18 50 79 99 79 99 79 99 79 99
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 18 50 79 99 79 99 79 99 79 99
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 18 50 79 99 79 99 79 99 79 99
Entering state 110
Reducing stack by rule 29 (line 258):
   $1 = nterm value ()
   $2 = token COMMA ()
   $3 = nterm output_list ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 18 50 79 99 79 99 79 99
Entering state 110
Reducing stack by rule 29 (line 258):
   $1 = nterm value ()
   $2 = token COMMA ()
   $3 = nterm output_list ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 18 50 79 99 79 99
Entering state 110
Reducing stack by rule 29 (line 258):
   $1 = nterm value ()
   $2 = token COMMA ()
   $3 = nterm output_list ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 18 50 79 99
Entering state 110
Reducing stack by rule 29 (line 258):
   $1 = nterm value ()
   $2 = token COMMA ()
   $3 = nterm output_list ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_#include <stdio.h>
int main(void)
{
printf("%c", 'h');
printf("%c", 'e');
printf("%c", 'l');
printf("%c", 'l');
printf("%c", 'o');
printf("\n");
return 0;
}
BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 25 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 22 52
Entering state 22
Reading a token: Next token is token ENDP ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5
Entering state 21
Reducing stack by rule 2 (line 124):
   $1 = token CODE ()
   $2 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 39
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token FULL_STOP ()
Shifting token FULL_STOP ()
Entering state 90
Reducing stack by rule 1 (line 104):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = token IDENTIFIER ()
   $6 = token FULL_STOP ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--02/12/2016----------------------------------------------------- 
Parse debug output for b.spl 
-- 6:43:42.54----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token DECLARATIONS ()
Shifting token DECLARATIONS ()
Entering state 6
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reducing stack by rule 56 (line 383):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 6
Entering state 38
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 60
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 88
Reducing stack by rule 57 (line 387):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 6
Entering state 38
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 61
Reading a token: Next token is token TYPE_L ()
Shifting token TYPE_L ()
Entering state 89
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 102
Reducing stack by rule 8 (line 154):
   $1 = token INTEGER ()
-> $$ = nterm type_y ()
Stack now 0 1 3 6 38 61 89
Entering state 104
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 111
Reducing stack by rule 6 (line 144):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE_L ()
   $4 = nterm type_y ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 1 3 6
Entering state 37
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reducing stack by rule 56 (line 383):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 6 37
Entering state 38
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 61
Reading a token: Next token is token TYPE_L ()
Shifting token TYPE_L ()
Entering state 89
Reading a token: Next token is token CHARACTER ()
Shifting token CHARACTER ()
Entering state 103
Reducing stack by rule 9 (line 158):
   $1 = token CHARACTER ()
-> $$ = nterm type_y ()
Stack now 0 1 3 6 37 38 61 89
Entering state 104
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 111
Reducing stack by rule 6 (line 144):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE_L ()
   $4 = nterm type_y ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 1 3 6 37
Entering state 37
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reducing stack by rule 56 (line 383):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 6 37 37
Entering state 38
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 60
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 88
Reducing stack by rule 57 (line 387):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 6 37 37
Entering state 38
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 61
Reading a token: Next token is token TYPE_L ()
Shifting token TYPE_L ()
Entering state 89
Reading a token: Next token is token REAL ()
Shifting token REAL ()
Entering state 101
Reducing stack by rule 7 (line 150):
   $1 = token REAL ()
-> $$ = nterm type_y ()
Stack now 0 1 3 6 37 37 38 61 89
Entering state 104
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 111
Reducing stack by rule 6 (line 144):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE_L ()
   $4 = nterm type_y ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 1 3 6 37 37
Entering state 37
Reading a token: Next token is token CODE ()
Reducing stack by rule 4 (line 134):
   $1 = nterm declaration ()
-> $$ = nterm declaration_list ()
Stack now 0 1 3 6 37 37
Entering state 59
Reducing stack by rule 5 (line 138):
   $1 = nterm declaration ()
   $2 = nterm declaration_list ()
-> $$ = nterm declaration_list ()
Stack now 0 1 3 6 37
Entering state 59
Reducing stack by rule 5 (line 138):
   $1 = nterm declaration ()
   $2 = nterm declaration_list ()
-> $$ = nterm declaration_list ()
Stack now 0 1 3 6
Entering state 36
Next token is token CODE ()
Shifting token CODE ()
Entering state 58
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 20
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 51
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 80
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 100
Reducing stack by rule 27 (line 248):
   $1 = token READ ()
   $2 = token OPEN_BRACKET ()
   $3 = token IDENTIFIER ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 6 36 58
Entering state 29
Reducing stack by rule 18 (line 198):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 20
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 51
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 80
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 100
Reducing stack by rule 27 (line 248):
   $1 = token READ ()
   $2 = token OPEN_BRACKET ()
   $3 = token IDENTIFIER ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 6 36 58 22 52
Entering state 29
Reducing stack by rule 18 (line 198):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 14
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 14
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 14
Entering state 31
Reading a token: Next token is token GREATER_THAN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 14
Entering state 46
Next token is token GREATER_THAN ()
Shifting token GREATER_THAN ()
Entering state 70
Reducing stack by rule 37 (line 295):
   $1 = token GREATER_THAN ()
-> $$ = nterm comparator ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 46
Entering state 74
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 46 74
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 46 74
Entering state 31
Reading a token: Next token is token THEN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 46 74
Entering state 94
Next token is token THEN ()
Reducing stack by rule 34 (line 282):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm conditional ()
Stack now 0 1 3 6 36 58 22 52 22 52 14
Entering state 45
Next token is token THEN ()
Reducing stack by rule 30 (line 264):
   $1 = nterm conditional ()
-> $$ = nterm conditional_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 14
Entering state 44
Next token is token THEN ()
Shifting token THEN ()
Entering state 65
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 8
Reducing stack by rule 51 (line 359):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 44 65 18 50
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 44 65 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 44 65 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 44 65
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 44 65
Entering state 22
Reading a token: Next token is token ELSE ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 44 65
Entering state 91
Next token is token ELSE ()
Shifting token ELSE ()
Entering state 106
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 8
Reducing stack by rule 51 (line 359):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 44 65 91 106 18 50
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 44 65 91 106 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 44 65 91 106 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 44 65 91 106
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 44 65 91 106
Entering state 22
Reading a token: Next token is token ENDIF ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 14 44 65 91 106
Entering state 112
Next token is token ENDIF ()
Shifting token ENDIF ()
Entering state 114
Reducing stack by rule 21 (line 214):
   $1 = token IF ()
   $2 = nterm conditional_list ()
   $3 = token THEN ()
   $4 = nterm statement_list ()
   $5 = token ELSE ()
   $6 = nterm statement_list ()
   $7 = token ENDIF ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 24
Reducing stack by rule 13 (line 178):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 25 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 20
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 51
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 80
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 100
Reducing stack by rule 27 (line 248):
   $1 = token READ ()
   $2 = token OPEN_BRACKET ()
   $3 = token IDENTIFIER ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52
Entering state 29
Reducing stack by rule 18 (line 198):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 31
Reading a token: Next token is token ASTERIX ()
Shifting token ASTERIX ()
Entering state 56
Reading a token: Next token is token REAL_NUMBER ()
Shifting token REAL_NUMBER ()
Entering state 10
Reducing stack by rule 54 (line 373):
   $1 = token REAL_NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 31 56
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 31 56
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 31 56
Entering state 85
Reducing stack by rule 45 (line 331):
   $1 = nterm term ()
   $2 = token ASTERIX ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 31
Reading a token: Next token is token HYPHEN_GREATER_THAN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 30
Next token is token HYPHEN_GREATER_THAN ()
Shifting token HYPHEN_GREATER_THAN ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 19 (line 204):
   $1 = nterm expression ()
   $2 = token HYPHEN_GREATER_THAN ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 23
Reducing stack by rule 12 (line 174):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 25 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 20
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 51
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 80
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 100
Reducing stack by rule 27 (line 248):
   $1 = token READ ()
   $2 = token OPEN_BRACKET ()
   $3 = token IDENTIFIER ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 29
Reducing stack by rule 18 (line 198):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 25 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token ENDP ()
Reducing stack #include <stdio.h>
int main(void)
{
int  _b, _a;
char  _c;
float  _e, _d;
scanf(" %d", &_a);
scanf(" %d", &_b);
if(_a > _b)
{
printf("%c", 'A');
}
else
{
printf("%c", 'B');
}
printf("\n");
scanf(" %f", &_d);
_e = (_d * 2.3);
printf("%f", _e);
printf("\n");
scanf(" %c", &_c);
printf("%c", _c);
printf("\n");
return 0;
}
by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58
Entering state 87
Reducing stack by rule 3 (line 128):
   $1 = token DECLARATIONS ()
   $2 = nterm declaration_list ()
   $3 = token CODE ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 39
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token FULL_STOP ()
Shifting token FULL_STOP ()
Entering state 90
Reducing stack by rule 1 (line 104):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = token IDENTIFIER ()
   $6 = token FULL_STOP ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--02/12/2016----------------------------------------------------- 
Parse debug output for c.spl 
-- 6:43:44.27----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token DECLARATIONS ()
Shifting token DECLARATIONS ()
Entering state 6
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reducing stack by rule 56 (line 383):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 6
Entering state 38
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 61
Reading a token: Next token is token TYPE_L ()
Shifting token TYPE_L ()
Entering state 89
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 102
Reducing stack by rule 8 (line 154):
   $1 = token INTEGER ()
-> $$ = nterm type_y ()
Stack now 0 1 3 6 38 61 89
Entering state 104
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 111
Reducing stack by rule 6 (line 144):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE_L ()
   $4 = nterm type_y ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 1 3 6
Entering state 37
Reading a token: Next token is token CODE ()
Reducing stack by rule 4 (line 134):
   $1 = nterm declaration ()
-> $$ = nterm declaration_list ()
Stack now 0 1 3 6
Entering state 36
Next token is token CODE ()
Shifting token CODE ()
Entering state 58
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 17
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 49
Reading a token: Next token is token IS ()
Shifting token IS ()
Entering state 77
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 17 49 77
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 17 49 77
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 17 49 77
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 17 49 77
Entering state 31
Reading a token: Next token is token BY ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 17 49 77
Entering state 97
Next token is token BY ()
Shifting token BY ()
Entering state 109
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 17 49 77 97 109
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 17 49 77 97 109
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 17 49 77 97 109
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 17 49 77 97 109
Entering state 31
Reading a token: Next token is token TO ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 17 49 77 97 109
Entering state 113
Next token is token TO ()
Shifting token TO ()
Entering state 115
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115
Entering state 31
Reading a token: Next token is token DO ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115
Entering state 116
Next token is token DO ()
Shifting token DO ()
Entering state 117
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 14
Reading a token: Next token is token NOT ()
Shifting token NOT ()
Entering state 43
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 43
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 43
Entering state 31
Reading a token: Next token is token EQUAL ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 43
Entering state 46
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 68
Reducing stack by rule 35 (line 287):
   $1 = token EQUAL ()
-> $$ = nterm comparator ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 43 46
Entering state 74
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 43 46 74
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 43 46 74
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 43 46 74
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 43 46 74
Entering state 31
Reading a token: Next token is token THEN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 43 46 74
Entering state 94
Next token is token THEN ()
Reducing stack by rule 34 (line 282):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm conditional ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 43
Entering state 64
Reducing stack by rule 33 (line 278):
   $1 = token NOT ()
   $2 = nterm conditional ()
-> $$ = nterm conditional ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14
Entering state 45
Next token is token THEN ()
Reducing stack by rule 30 (line 264):
   $1 = nterm conditional ()
-> $$ = nterm conditional_list ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14
Entering state 44
Next token is token THEN ()
Shifting token THEN ()
Entering state 65
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 44 65 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 44 65 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 44 65
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 44 65
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 25 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 44 65 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 44 65 22 52
Entering state 22
Reading a token: Next token is token ENDIF ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 44 65 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117 14 44 65
Entering state 91
Next token is token ENDIF ()
Shifting token ENDIF ()
Entering state 105
Reducing stack by rule 20 (line 210):
   $1 = token IF ()
   $2 = nterm conditional_list ()
   $3 = token THEN ()
   $4 = nterm statement_list ()
   $5 = token ENDIF ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117
Entering state 24
Reducing stack by rule 13 (line 178):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117
Entering state 22
Reading a token: Next token is token ENDFOR ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 17 49 77 97 109 113 115 116 117
Entering state 118
Next token is token ENDFOR ()
Shifting token ENDFOR ()
Entering state 119
Reducing stack by rule 24 (line 232):
   $1 = token FOR ()
   $2 = token IDENTIFIER ()
   $3 = token IS ()
   $4 = nterm expression ()
   $5 = token BY ()
   $6 = nterm expression ()
   $7 = token TO ()
   $8 = nterm expression ()
   $9 = token DO ()
   $10 = nterm statement_list ()
   $11 = token ENDFOR ()
-> $$ = nterm for_statement ()
Stack now 0 1 3 6 36 58
Entering state 27
Reducing stack by rule 16 (line 190):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52
Entering state 31
Reading a token: Next token is token HYPHEN_GREATER_THAN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52
Entering state 30
Next token is token HYPHEN_GREATER_THAN ()
Shifting token HYPHEN_GREATER_THAN ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 19 (line 204):
   $1 = nterm expression ()
   $2 = token HYPHEN_GREATER_THAN ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 6 36 58 22 52
Entering state 23
Reducing stack by rule 12 (line 174):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token DO ()
Shifting token DO ()
Entering state 15
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 15
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 15
Entering state 31
Reading a token: Next token is token PLUS ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 15
Entering state 30
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 54
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 30 54
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 30 54
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 30 54
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 30 54
Entering state 83
Reading a token: Next token is token HYPHEN_GREATER_THAN ()
Reducing stack by rule 42 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 15
Entering state 30
Next token is token HYPHEN_GREATER_THAN ()
Shifting token HYPHEN_GREATER_THAN ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 19 (line 204):
   $1 = nterm expression ()
   $2 = token HYPHEN_GREATER_THAN ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 15
Entering state 23
Reducing stack by rule 12 (line 174):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 15
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 14
Reading a token: Next token is token NOT ()
Shifting token NOT ()
Entering state 43
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 43
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 43
Entering state 31
Reading a token: Next token is token EQUAL ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 43
Entering state 46
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 68
Reducing stack by rule 35 (line 287):
   $1 = token EQUAL ()
-> $$ = nterm comparator ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 43 46
Entering state 74
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 43 46 74
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 43 46 74
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 43 46 74
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 43 46 74
Entering state 31
Reading a token: Next token is token AND ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 43 46 74
Entering state 94
Next token is token AND ()
Reducing stack by rule 34 (line 282):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm conditional ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 43
Entering state 64
Reducing stack by rule 33 (line 278):
   $1 = token NOT ()
   $2 = nterm conditional ()
-> $$ = nterm conditional ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14
Entering state 45
Next token is token AND ()
Shifting token AND ()
Entering state 67
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 45 67
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 45 67
Entering state 31
Reading a token: Next token is token LESS_THAN_GREATER_THAN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 45 67
Entering state 46
Next token is token LESS_THAN_GREATER_THAN ()
Shifting token LESS_THAN_GREATER_THAN ()
Entering state 73
Reducing stack by rule 40 (line 307):
   $1 = token LESS_THAN_GREATER_THAN ()
-> $$ = nterm comparator ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 45 67 46
Entering state 74
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 45 67 46 74
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 45 67 46 74
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 45 67 46 74
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 45 67 46 74
Entering state 31
Reading a token: Next token is token THEN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 45 67 46 74
Entering state 94
Next token is token THEN ()
Reducing stack by rule 34 (line 282):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm conditional ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 45 67
Entering state 93
Reducing stack by rule 32 (line 272):
   $1 = nterm conditional ()
   $2 = token AND ()
   $3 = nterm conditional ()
-> $$ = nterm conditional_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14
Entering state 44
Next token is token THEN ()
Shifting token THEN ()
Entering state 65
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 44 65 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 44 65 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 44 65
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 44 65
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 25 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 44 65 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 44 65 22 52
Entering state 22
Reading a token: Next token is token ENDIF ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 44 65 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52 14 44 65
Entering state 91
Next token is token ENDIF ()
Shifting token ENDIF ()
Entering state 105
Reducing stack by rule 20 (line 210):
   $1 = token IF ()
   $2 = nterm conditional_list ()
   $3 = token THEN ()
   $4 = nterm statement_list ()
   $5 = token ENDIF ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52
Entering state 24
Reducing stack by rule 13 (line 178):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52
Entering state 22
Reading a token: Next token is token WHILE ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 15
Entering state 47
Next token is token WHILE ()
Shifting token WHILE ()
Entering state 75
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 47 75
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 47 75
Entering state 31
Reading a token: Next token is token LESS_THAN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 47 75
Entering state 46
Next token is token LESS_THAN ()
Shifting token LESS_THAN ()
Entering state 69
Reducing stack by rule 36 (line 291):
   $1 = token LESS_THAN ()
-> $$ = nterm comparator ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 47 75 46
Entering state 74
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 47 75 46 74
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 47 75 46 74
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 47 75 46 74
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 47 75 46 74
Entering state 31
Reading a token: Next token is token ENDDO ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 47 75 46 74
Entering state 94
Next token is token ENDDO ()
Reducing stack by rule 34 (line 282):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm conditional ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 47 75
Entering state 45
Next token is token ENDDO ()
Reducing stack by rule 30 (line 264):
   $1 = nterm conditional ()
-> $$ = nterm conditional_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 15 47 75
Entering state 95
Next token is token ENDDO ()
Shifting token ENDDO ()
Entering state 107
Reducing stack by rule 22 (line 220):
   $1 = token DO ()
   $2 = nterm statement_list ()
   $3 = token WHILE ()
   $4 = nterm conditional_list ()
   $5 = token ENDDO ()
-> $$ = nterm do_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 25
Reducing stack by rule 14 (line 182):
   $1 = nterm do_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 31
Reading a token: Next token is token HYPHEN_GREATER_THAN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 30
Next token is token HYPHEN_GREATER_THAN ()
Shifting token HYPHEN_GREATER_THAN ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 19 (line 204):
   $1 = nterm expression ()
   $2 = token HYPHEN_GREATER_THAN ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 23
Reducing stack by rule 12 (line 174):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token WHILE ()
Shifting token WHILE ()
Entering state 16
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16
Entering state 31
Reading a token: Next token is token LESS_THAN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16
Entering state 46
Next token is token LESS_THAN ()
Shifting token LESS_THAN ()
Entering state 69
Reducing stack by rule 36 (line 291):
   $1 = token LESS_THAN ()
-> $$ = nterm comparator ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 46
Entering state 74
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 46 74
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 46 74
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 46 74
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 46 74
Entering state 31
Reading a token: Next token is token DO ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 46 74
Entering state 94
Next token is token DO ()
Reducing stack by rule 34 (line 282):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm conditional ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16
Entering state 45
Next token is token DO ()
Reducing stack by rule 30 (line 264):
   $1 = nterm conditional ()
-> $$ = nterm conditional_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16
Entering state 48
Next token is token DO ()
Shifting token DO ()
Entering state 76
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 22 52
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 22 52
Entering state 31
Reading a token: Next token is token PLUS ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 22 52
Entering state 30
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 54
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 22 52 30 54
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 22 52 30 54
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 22 52 30 54
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 22 52 30 54
Entering state 83
Reading a token: Next token is token HYPHEN_GREATER_THAN ()
Reducing stack by rule 42 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 22 52
Entering state 30
Next token is token HYPHEN_GREATER_THAN ()
Shifting token HYPHEN_GREATER_THAN ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 19 (line 204):
   $1 = nterm expression ()
   $2 = token HYPHEN_GREATER_THAN ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 22 52
Entering state 23
Reducing stack by rule 12 (line 174):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 22 52
Entering state 22
Reading a token: Next token is token ENDWHILE ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 16 48 76
Entering state 96
Next token is token ENDWHILE ()
Shifting token ENDWHILE ()
Entering state 108
Reducing stack by rule 23 (line 226):
   $1 = token WHILE ()
   $2 = nterm conditional_list ()
   $3 = token DO ()
   $4 = nterm statement_list ()
   $5 = token ENDWHILE ()
-> $$ = nterm while_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52
Entering state 26
Reducing stack by rule 15 (line 186):
   $1 = nterm while_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 25 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token ENDP ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58
Entering state 87
Reducing stack by rule 3 (line 128):
   $1 = token DECLARATIONS ()
   $2 = nterm declaration_list ()
   $3 = token CODE ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 39
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token FULL_STOP ()
Shifting token FULL_STOP ()
Entering state 90
Reducing stack by rule 1 (line 104):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token END#include <stdio.h>
int main(void)
{
int  _a;
register int _by1;
for(_a = 1; _by1 = 1, (_a - 13) * ((_by1 > 0) - (_by1 < 0)) <= 0; _a += _by1)
{
if(!(_a == 7))
{
printf("%d", _a);
printf("\n");
}
}
_a = 0;
do
{
_a = (_a + 1);
if(!(_a == 6) && _a != 8)
{
printf("%d", _a);
printf("\n");
}
} while(_a < 14);
_a = 0;
while(_a < 12)
{
printf("%d", _a);
_a = (_a + 1);
}
printf("\n");
return 0;
}
P ()
   $5 = token IDENTIFIER ()
   $6 = token FULL_STOP ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--02/12/2016----------------------------------------------------- 
Parse debug output for d.spl 
-- 6:43:45.91----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token DECLARATIONS ()
Shifting token DECLARATIONS ()
Entering state 6
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reducing stack by rule 56 (line 383):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 6
Entering state 38
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 60
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 88
Reducing stack by rule 57 (line 387):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 6
Entering state 38
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 60
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 88
Reducing stack by rule 57 (line 387):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 6
Entering state 38
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 61
Reading a token: Next token is token TYPE_L ()
Shifting token TYPE_L ()
Entering state 89
Reading a token: Next token is token REAL ()
Shifting token REAL ()
Entering state 101
Reducing stack by rule 7 (line 150):
   $1 = token REAL ()
-> $$ = nterm type_y ()
Stack now 0 1 3 6 38 61 89
Entering state 104
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 111
Reducing stack by rule 6 (line 144):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE_L ()
   $4 = nterm type_y ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 1 3 6
Entering state 37
Reading a token: Next token is token CODE ()
Reducing stack by rule 4 (line 134):
   $1 = nterm declaration ()
-> $$ = nterm declaration_list ()
Stack now 0 1 3 6
Entering state 36
Next token is token CODE ()
Shifting token CODE ()
Entering state 58
Reading a token: Next token is token HYPHEN ()
Shifting token HYPHEN ()
Entering state 13
Reading a token: Next token is token REAL_NUMBER ()
Shifting token REAL_NUMBER ()
Entering state 42
Reducing stack by rule 55 (line 377):
   $1 = token HYPHEN ()
   $2 = token REAL_NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58
Entering state 31
Reading a token: Next token is token HYPHEN_GREATER_THAN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58
Entering state 30
Next token is token HYPHEN_GREATER_THAN ()
Shifting token HYPHEN_GREATER_THAN ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 19 (line 204):
   $1 = nterm expression ()
   $2 = token HYPHEN_GREATER_THAN ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 6 36 58
Entering state 23
Reducing stack by rule 12 (line 174):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token HYPHEN ()
Shifting token HYPHEN ()
Entering state 13
Reading a token: Next token is token REAL_NUMBER ()
Shifting token REAL_NUMBER ()
Entering state 42
Reducing stack by rule 55 (line 377):
   $1 = token HYPHEN ()
   $2 = token REAL_NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52
Entering state 31
Reading a token: Next token is token HYPHEN_GREATER_THAN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52
Entering state 30
Next token is token HYPHEN_GREATER_THAN ()
Shifting token HYPHEN_GREATER_THAN ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 19 (line 204):
   $1 = nterm expression ()
   $2 = token HYPHEN_GREATER_THAN ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 6 36 58 22 52
Entering state 23
Reducing stack by rule 12 (line 174):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 31
Reading a token: Next token is token ASTERIX ()
Shifting token ASTERIX ()
Entering state 56
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 31 56
Entering state 85
Reducing stack by rule 45 (line 331):
   $1 = nterm term ()
   $2 = token ASTERIX ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 31
Reading a token: Next token is token FORWARD_SLASH ()
Shifting token FORWARD_SLASH ()
Entering state 57
Reading a token: Next token is token REAL_NUMBER ()
Shifting token REAL_NUMBER ()
Entering state 10
Reducing stack by rule 54 (line 373):
   $1 = token REAL_NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 31 57
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 31 57
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 31 57
Entering state 86
Reducing stack by rule 46 (line 335):
   $1 = nterm term ()
   $2 = token FORWARD_SLASH ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 31
Reading a token: Next token is token HYPHEN_GREATER_THAN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 30
Next token is token HYPHEN_GREATER_THAN ()
Shifting token HYPHEN_GREATER_THAN ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 19 (line 204):
   $1 = nterm expression ()
   $2 = token HYPHEN_GREATER_THAN ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 23
Reducing stack by rule 12 (line 174):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 25 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 20
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 51
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 80
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 100
Reducing stack by rule 27 (line 248):
   $1 = token READ ()
   $2 = token OPEN_BRACKET ()
   $3 = token IDENTIFIER ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 29
Reducing stack by rule 18 (line 198):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 31
Reading a token: Next token is token PLUS ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 30
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 54
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 30 54
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 30 54
Entering state 83
Reading a token: Next token is token HYPHEN_GREATER_THAN ()
Reducing stack by rule 42 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 30
Next token is token HYPHEN_GREATER_THAN ()
Shifting token HYPHEN_GREATER_THAN ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 19 (line 204):
   $1 = nterm expression ()
   $2 = token HYPHEN_GREATER_THAN ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 23
Reducing stack by rule 12 (line 174):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 25 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token ENDP ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token #include <stdio.h>
int main(void)
{
float  _r3, _r2, _r1;
_r1 = -2.4;
_r2 = -34.989;
_r3 = ((_r1 * _r2) / 7.4);
printf("%f", _r3);
printf("\n");
scanf(" %f", &_r1);
_r3 = (_r1 + _r3);
printf("%f", _r3);
printf("\n");
return 0;
}
SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58
Entering state 87
Reducing stack by rule 3 (line 128):
   $1 = token DECLARATIONS ()
   $2 = nterm declaration_list ()
   $3 = token CODE ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 39
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token FULL_STOP ()
Shifting token FULL_STOP ()
Entering state 90
Reducing stack by rule 1 (line 104):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = token IDENTIFIER ()
   $6 = token FULL_STOP ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--02/12/2016----------------------------------------------------- 
Parse debug output for e.spl 
-- 6:43:47.22----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token DECLARATIONS ()
Shifting token DECLARATIONS ()
Entering state 6
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reducing stack by rule 56 (line 383):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 6
Entering state 38
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 60
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 88
Reducing stack by rule 57 (line 387):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 6
Entering state 38
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 61
Reading a token: Next token is token TYPE_L ()
Shifting token TYPE_L ()
Entering state 89
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 102
Reducing stack by rule 8 (line 154):
   $1 = token INTEGER ()
-> $$ = nterm type_y ()
Stack now 0 1 3 6 38 61 89
Entering state 104
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 111
Reducing stack by rule 6 (line 144):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE_L ()
   $4 = nterm type_y ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 1 3 6
Entering state 37
Reading a token: Next token is token CODE ()
Reducing stack by rule 4 (line 134):
   $1 = nterm declaration ()
-> $$ = nterm declaration_list ()
Stack now 0 1 3 6
Entering state 36
Next token is token CODE ()
Shifting token CODE ()
Entering state 58
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 20
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 51
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 80
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 100
Reducing stack by rule 27 (line 248):
   $1 = token READ ()
   $2 = token OPEN_BRACKET ()
   $3 = token IDENTIFIER ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 6 36 58
Entering state 29
Reducing stack by rule 18 (line 198):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 14
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 14
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 14
Entering state 31
Reading a token: Next token is token LESS_THAN_EQUAL ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 14
Entering state 46
Next token is token LESS_THAN_EQUAL ()
Shifting token LESS_THAN_EQUAL ()
Entering state 71
Reducing stack by rule 38 (line 299):
   $1 = token LESS_THAN_EQUAL ()
-> $$ = nterm comparator ()
Stack now 0 1 3 6 36 58 22 52 14 46
Entering state 74
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 14 46 74
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 14 46 74
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 14 46 74
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 14 46 74
Entering state 31
Reading a token: Next token is token OR ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 14 46 74
Entering state 94
Next token is token OR ()
Reducing stack by rule 34 (line 282):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm conditional ()
Stack now 0 1 3 6 36 58 22 52 14
Entering state 45
Next token is token OR ()
Shifting token OR ()
Entering state 66
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 14 45 66
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 14 45 66
Entering state 31
Reading a token: Next token is token GREATER_THAN_EQUAL ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 14 45 66
Entering state 46
Next token is token GREATER_THAN_EQUAL ()
Shifting token GREATER_THAN_EQUAL ()
Entering state 72
Reducing stack by rule 39 (line 303):
   $1 = token GREATER_THAN_EQUAL ()
-> $$ = nterm comparator ()
Stack now 0 1 3 6 36 58 22 52 14 45 66 46
Entering state 74
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 14 45 66 46 74
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 14 45 66 46 74
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 14 45 66 46 74
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 14 45 66 46 74
Entering state 31
Reading a token: Next token is token THEN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 14 45 66 46 74
Entering state 94
Next token is token THEN ()
Reducing stack by rule 34 (line 282):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm conditional ()
Stack now 0 1 3 6 36 58 22 52 14 45 66
Entering state 92
Reducing stack by rule 31 (line 268):
   $1 = nterm conditional ()
   $2 = token OR ()
   $3 = nterm conditional ()
-> $$ = nterm conditional_list ()
Stack now 0 1 3 6 36 58 22 52 14
Entering state 44
Next token is token THEN ()
Shifting token THEN ()
Entering state 65
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 14 44 65 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 22 52 14 44 65 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 14 44 65
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 14 44 65
Entering state 22
Reading a token: Next token is token ENDIF ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 14 44 65
Entering state 91
Next token is token ENDIF ()
Shifting token ENDIF ()
Entering state 105
Reducing stack by rule 20 (line 210):
   $1 = token IF ()
   $2 = nterm conditional_list ()
   $3 = token THEN ()
   $4 = nterm statement_list ()
   $5 = token ENDIF ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 6 36 58 22 52
Entering state 24
Reducing stack by rule 13 (line 178):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 12
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 18 50 12
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 18 50 12
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 18 50 12
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 18 50 12
Entering state 31
Reading a token: Next token is token HYPHEN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 18 50 12
Entering state 40
Next token is token HYPHEN ()
Shifting token HYPHEN ()
Entering state 55
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 9
Reducing stack by rule 52 (line 365):
   $1 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 18 50 12 40 55
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 18 50 12 40 55
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 18 50 12 40 55
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 18 50 12 40 55
Entering state 84
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 43 (line 321):
   $1 = nterm expression ()
   $2 = token HYPHEN ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 18 50 12
Entering state 40
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 63
Reducing stack by rule 49 (line 349):
   $1 = token OPEN_BRACKET ()
   $2 = nterm expression ()
   $3 = token CLOSE_BRACKET ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 25 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 17
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 49
Reading a token: Next token is token IS ()
Shifting token IS ()
Entering state 77
Reading a token: Next token is token HYPHEN ()
Shifting token HYPHEN ()
Entering state 13
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 41
Reducing stack by rule 53 (line 369):
   $1 = token HYPHEN ()
   $2 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77
Entering state 31
Reading a token: Next token is token BY ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77
Entering state 97
Next token is token BY ()
Shifting token BY ()
Entering state 109
Reading a token: Next token is token HYPHEN ()
Shifting token HYPHEN ()
Entering state 13
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 41
Reducing stack by rule 53 (line 369):
   $1 = token HYPHEN ()
   $2 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109
Entering state 31
Reading a token: Next token is token TO ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109
Entering state 113
Next token is token TO ()
Shifting token TO ()
Entering state 115
Reading a token: Next token is token HYPHEN ()
Shifting token HYPHEN ()
Entering state 13
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 41
Reducing stack by rule 53 (line 369):
   $1 = token HYPHEN ()
   $2 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115
Entering state 31
Reading a token: Next token is token DO ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115
Entering state 116
Next token is token DO ()
Shifting token DO ()
Entering state 117
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 25 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117 22 52
Entering state 22
Reading a token: Next token is token ENDFOR ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117
Entering state 118
Next token is token ENDFOR ()
Shifting token ENDFOR ()
Entering state 119
Reducing stack by rule 24 (line 232):
   $1 = token FOR ()
   $2 = token IDENTIFIER ()
   $3 = token IS ()
   $4 = nterm expression ()
   $5 = token BY ()
   $6 = nterm expression ()
   $7 = token TO ()
   $8 = nterm expression ()
   $9 = token DO ()
   $10 = nterm statement_list ()
   $11 = token ENDFOR ()
-> $$ = nterm for_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52
Entering state 27
Reducing stack by rule 16 (line 190):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token HYPHEN ()
Shifting token HYPHEN ()
Entering state 13
Reading a token: Next token is token NUMBER ()
Shifting token NUMBER ()
Entering state 41
Reducing stack by rule 53 (line 369):
   $1 = token HYPHEN ()
   $2 = token NUMBER ()
-> $$ = nterm number_constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 34
Reducing stack by rule 50 (line 355):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 33
Reducing stack by rule 47 (line 341):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 31
Reading a token: Next token is token HYPHEN_GREATER_THAN ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 30
Next token is token HYPHEN_GREATER_THAN ()
Shifting token HYPHEN_GREATER_THAN ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reducing stack by rule 19 (line 204):
   $1 = nterm expression ()
   $2 = token HYPHEN_GREATER_THAN ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 23
Reducing stack by rule 12 (line 174):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 17
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 49
Reading a token: Next token is token IS ()
Shifting token IS ()
Entering state 77
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77
Entering state 31
Reading a token: Next token is token ASTERIX ()
Shifting token ASTERIX ()
Entering state 56
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 31 56
Entering state 85
Reducing stack by rule 45 (line 331):
   $1 = nterm term ()
   $2 = token ASTERIX ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77
Entering state 31
Reading a token: Next token is token ASTERIX ()
Shifting token ASTERIX ()
Entering state 56
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 31 56
Entering state 85
Reducing stack by rule 45 (line 331):
   $1 = nterm term ()
   $2 = token ASTERIX ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77
Entering state 31
Reading a token: Next token is token BY ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77
Entering state 97
Next token is token BY ()
Shifting token BY ()
Entering state 109
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109
Entering state 31
Reading a token: Next token is token ASTERIX ()
Shifting token ASTERIX ()
Entering state 56
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 31 56
Entering state 85
Reducing stack by rule 45 (line 331):
   $1 = nterm term ()
   $2 = token ASTERIX ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109
Entering state 31
Reading a token: Next token is token ASTERIX ()
Shifting token ASTERIX ()
Entering state 56
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 31 56
Entering state 85
Reducing stack by rule 45 (line 331):
   $1 = nterm term ()
   $2 = token ASTERIX ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109
Entering state 31
Reading a token: Next token is token ASTERIX ()
Shifting token ASTERIX ()
Entering state 56
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 31 56
Entering state 85
Reducing stack by rule 45 (line 331):
   $1 = nterm term ()
   $2 = token ASTERIX ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109
Entering state 31
Reading a token: Next token is token ASTERIX ()
Shifting token ASTERIX ()
Entering state 56
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 31 56
Entering state 85
Reducing stack by rule 45 (line 331):
   $1 = nterm term ()
   $2 = token ASTERIX ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109
Entering state 31
Reading a token: Next token is token TO ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109
Entering state 113
Next token is token TO ()
Shifting token TO ()
Entering state 115
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115
Entering state 31
Reading a token: Next token is token ASTERIX ()
Shifting token ASTERIX ()
Entering state 56
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56
Entering state 85
Reducing stack by rule 45 (line 331):
   $1 = nterm term ()
   $2 = token ASTERIX ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115
Entering state 31
Reading a token: Next token is token ASTERIX ()
Shifting token ASTERIX ()
Entering state 56
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 12
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12
Entering state 31
Reading a token: Next token is token PLUS ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12
Entering state 40
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 54
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12 40 54
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12 40 54
Entering state 83
Reading a token: Next token is token PLUS ()
Reducing stack by rule 42 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12
Entering state 40
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 54
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12 40 54
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12 40 54
Entering state 83
Reading a token: Next token is token PLUS ()
Reducing stack by rule 42 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12
Entering state 40
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 54
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12 40 54
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12 40 54
Entering state 83
Reading a token: Next token is token PLUS ()
Reducing stack by rule 42 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12
Entering state 40
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 54
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12 40 54
Entering state 32
Reducing stack by rule 44 (line 327):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12 40 54
Entering state 83
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 42 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56 12
Entering state 40
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 63
Reducing stack by rule 49 (line 349):
   $1 = token OPEN_BRACKET ()
   $2 = nterm expression ()
   $3 = token CLOSE_BRACKET ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 31 56
Entering state 85
Reducing stack by rule 45 (line 331):
   $1 = nterm term ()
   $2 = token ASTERIX ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115
Entering state 31
Reading a token: Next token is token DO ()
Reducing stack by rule 41 (line 313):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115
Entering state 116
Next token is token DO ()
Shifting token DO ()
Entering state 117
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 50
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 11
Reducing stack by rule 48 (line 345):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117 18 50
Entering state 79
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 28 (line 254):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117 18 50
Entering state 78
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 98
Reducing stack by rule 26 (line 242):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117
Entering state 22
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 52
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 25 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117 22 52
Entering state 28
Reducing stack by rule 17 (line 194):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117 22 52
Entering state 22
Reading a token: Next token is token ENDFOR ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52 17 49 77 97 109 113 115 116 117
Entering state 118
Next token is token ENDFOR ()
Shifting token ENDFOR ()
Entering state 119
Reducing stack by rule 24 (line 232):
   $1 = token FOR ()
   $2 = token IDENTIFIER ()
   $3 = token IS ()
   $4 = nterm expression ()
   $5 = token BY ()
   $6 = nterm expression ()
   $7 = token TO ()
   $8 = nterm expression ()
   $9 = token DO ()
   $10 = nterm statement_list ()
   $11 = token ENDFOR ()
-> $$ = nterm for_statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 27
Reducing stack by rule 16 (line 190):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 22
Reading a token: Next token is token ENDP ()
Reducing stack by rule 10 (line 164):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()#include <stdio.h>
int main(void)
{
int  _i, _integer;
scanf(" %d", &_integer);
if(_integer <= 5 || _integer >= 12)
{
printf("%d", _integer);
}
printf("%d", (36 - 1));
printf("\n");
register int _by1;
for(_integer = -1; _by1 = -1, (_integer - -5) * ((_by1 > 0) - (_by1 < 0)) <= 0; _integer += _by1)
{
printf("%d", _integer);
printf("\n");
}
_i = -1;
register int _by2;
for(_integer = ((_i * _i) * _i); _by2 = ((((_i * _i) * _i) * _i) * _i), (_integer - ((_i * _i) * ((((_i + _i) + _i) + _i) + _i))) * ((_by2 > 0) - (_by2 < 0)) <= 0; _integer += _by2)
{
printf("%d", _integer);
printf("\n");
}
return 0;
}

   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58 22 52
Entering state 81
Reducing stack by rule 11 (line 168):
   $1 = nterm statement ()
   $2 = token SEMICOLON ()
   $3 = nterm statement_list ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6 36 58
Entering state 87
Reducing stack by rule 3 (line 128):
   $1 = token DECLARATIONS ()
   $2 = nterm declaration_list ()
   $3 = token CODE ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 39
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token FULL_STOP ()
Shifting token FULL_STOP ()
Entering state 90
Reducing stack by rule 1 (line 104):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = token IDENTIFIER ()
   $6 = token FULL_STOP ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--02/12/2016----------------------------------------------------- 
Parse Tree output for a.spl 
-- 6:43:52.26----------------------------------------------------- 
PROGRAM Identifier: ProgA
  PROGRAM Identifier: ProgA
  BLOCK
    STATEMENT_LIST
      STATEMENT
        WRITE_STATEMENT
          OUTPUT_LIST
            VALUE
              CONSTANT Character: h
            OUTPUT_LIST
              VALUE
                CONSTANT Character: e
              OUTPUT_LIST
                VALUE
                  CONSTANT Character: l
                OUTPUT_LIST
                  VALUE
                    CONSTANT Character: l
                  OUTPUT_LIST
                    VALUE
                      CONSTANT Character: o
      STATEMENT_LIST
        STATEMENT
          WRITE_STATEMENT

--02/12/2016----------------------------------------------------- 
Parse Tree output for b.spl 
-- 6:43:53.72----------------------------------------------------- 
PROGRAM Identifier: ProgB
  PROGRAM Identifier: ProgB
  BLOCK
    DECLARATION_LIST
      DECLARATION
        IDENTIFIER_LIST Identifier: b
          IDENTIFIER_LIST Identifier: a
        TYPE_Y
      DECLARATION_LIST
        DECLARATION
          IDENTIFIER_LIST Identifier: c
          TYPE_Y
        DECLARATION_LIST
          DECLARATION
            IDENTIFIER_LIST Identifier: e
              IDENTIFIER_LIST Identifier: d
            TYPE_Y
    STATEMENT_LIST
      STATEMENT
        READ_STATEMENT Identifier: a
      STATEMENT_LIST
        STATEMENT
          READ_STATEMENT Identifier: b
        STATEMENT_LIST
          STATEMENT
            IF_STATEMENT
              CONDITIONAL_LIST
                CONDITIONAL
                  EXPRESSION
                    TERM
                      VALUE Identifier: a
                  COMPARATOR
                  EXPRESSION
                    TERM
                      VALUE Identifier: b
              STATEMENT_LIST
                STATEMENT
                  WRITE_STATEMENT
                    OUTPUT_LIST
                      VALUE
                        CONSTANT Character: A
              STATEMENT_LIST
                STATEMENT
                  WRITE_STATEMENT
                    OUTPUT_LIST
                      VALUE
                        CONSTANT Character: B
          STATEMENT_LIST
            STATEMENT
              WRITE_STATEMENT
            STATEMENT_LIST
              STATEMENT
                READ_STATEMENT Identifier: d
              STATEMENT_LIST
                STATEMENT
                  ASSIGNMENT_STATEMENT Identifier: e
                    EXPRESSION
                      TERM
                        TERM
                          VALUE Identifier: d
                        VALUE
                          CONSTANT
                            FLOATING_NUMBER_CONSTANT Number: 2.3
                STATEMENT_LIST
                  STATEMENT
                    WRITE_STATEMENT
                      OUTPUT_LIST
                        VALUE Identifier: e
                  STATEMENT_LIST
                    STATEMENT
                      WRITE_STATEMENT
                    STATEMENT_LIST
                      STATEMENT
                        READ_STATEMENT Identifier: c
                      STATEMENT_LIST
                        STATEMENT
                          WRITE_STATEMENT
                            OUTPUT_LIST
                              VALUE Identifier: c
                        STATEMENT_LIST
                          STATEMENT
                            WRITE_STATEMENT

--02/12/2016----------------------------------------------------- 
Parse Tree output for c.spl 
-- 6:43:57.07----------------------------------------------------- 
PROGRAM Identifier: Prog3
  PROGRAM Identifier: Prog3
  BLOCK
    DECLARATION_LIST
      DECLARATION
        IDENTIFIER_LIST Identifier: a
        TYPE_Y
    STATEMENT_LIST
      STATEMENT
        FOR_STATEMENT Identifier: a
          FOR_STATEMENT
            EXPRESSION
              TERM
                VALUE
                  CONSTANT
                    NUMBER_CONSTANT Number: 1
            EXPRESSION
              TERM
                VALUE
                  CONSTANT
                    NUMBER_CONSTANT Number: 1
            EXPRESSION
              TERM
                VALUE
                  CONSTANT
                    NUMBER_CONSTANT Number: 13
          STATEMENT_LIST
            STATEMENT
              IF_STATEMENT
                CONDITIONAL_LIST
                  CONDITIONAL
                    CONDITIONAL
                      EXPRESSION
                        TERM
                          VALUE Identifier: a
                      COMPARATOR
                      EXPRESSION
                        TERM
                          VALUE
                            CONSTANT
                              NUMBER_CONSTANT Number: 7
                STATEMENT_LIST
                  STATEMENT
                    WRITE_STATEMENT
                      OUTPUT_LIST
                        VALUE Identifier: a
                  STATEMENT_LIST
                    STATEMENT
                      WRITE_STATEMENT
      STATEMENT_LIST
        STATEMENT
          ASSIGNMENT_STATEMENT Identifier: a
            EXPRESSION
              TERM
                VALUE
                  CONSTANT
                    NUMBER_CONSTANT Number: 0
        STATEMENT_LIST
          STATEMENT
            DO_STATEMENT
              STATEMENT_LIST
                STATEMENT
                  ASSIGNMENT_STATEMENT Identifier: a
                    EXPRESSION
                      EXPRESSION
                        TERM
                          VALUE Identifier: a
                      TERM
                        VALUE
                          CONSTANT
                            NUMBER_CONSTANT Number: 1
                STATEMENT_LIST
                  STATEMENT
                    IF_STATEMENT
                      CONDITIONAL_LIST
                        CONDITIONAL
                          CONDITIONAL
                            EXPRESSION
                              TERM
                                VALUE Identifier: a
                            COMPARATOR
                            EXPRESSION
                              TERM
                                VALUE
                                  CONSTANT
                                    NUMBER_CONSTANT Number: 6
                        CONDITIONAL
                          EXPRESSION
                            TERM
                              VALUE Identifier: a
                          COMPARATOR
                          EXPRESSION
                            TERM
                              VALUE
                                CONSTANT
                                  NUMBER_CONSTANT Number: 8
                      STATEMENT_LIST
                        STATEMENT
                          WRITE_STATEMENT
                            OUTPUT_LIST
                              VALUE Identifier: a
                        STATEMENT_LIST
                          STATEMENT
                            WRITE_STATEMENT
              CONDITIONAL_LIST
                CONDITIONAL
                  EXPRESSION
                    TERM
                      VALUE Identifier: a
                  COMPARATOR
                  EXPRESSION
                    TERM
                      VALUE
                        CONSTANT
                          NUMBER_CONSTANT Number: 14
          STATEMENT_LIST
            STATEMENT
              ASSIGNMENT_STATEMENT Identifier: a
                EXPRESSION
                  TERM
                    VALUE
                      CONSTANT
                        NUMBER_CONSTANT Number: 0
            STATEMENT_LIST
              STATEMENT
                WHILE_STATEMENT
                  CONDITIONAL_LIST
                    CONDITIONAL
                      EXPRESSION
                        TERM
                          VALUE Identifier: a
                      COMPARATOR
                      EXPRESSION
                        TERM
                          VALUE
                            CONSTANT
                              NUMBER_CONSTANT Number: 12
                  STATEMENT_LIST
                    STATEMENT
                      WRITE_STATEMENT
                        OUTPUT_LIST
                          VALUE Identifier: a
                    STATEMENT_LIST
                      STATEMENT
                        ASSIGNMENT_STATEMENT Identifier: a
                          EXPRESSION
                            EXPRESSION
                              TERM
                                VALUE Identifier: a
                            TERM
                              VALUE
                                CONSTANT
                                  NUMBER_CONSTANT Number: 1
              STATEMENT_LIST
                STATEMENT
                  WRITE_STATEMENT

--02/12/2016----------------------------------------------------- 
Parse Tree output for d.spl 
-- 6:43:58.55----------------------------------------------------- 
PROGRAM Identifier: Prog4D
  PROGRAM Identifier: Prog4D
  BLOCK
    DECLARATION_LIST
      DECLARATION
        IDENTIFIER_LIST Identifier: r3
          IDENTIFIER_LIST Identifier: r2
            IDENTIFIER_LIST Identifier: r1
        TYPE_Y
    STATEMENT_LIST
      STATEMENT
        ASSIGNMENT_STATEMENT Identifier: r1
          EXPRESSION
            TERM
              VALUE
                CONSTANT
                  FLOATING_NEGATIVE_NUMBER_CONSTANT Number: -2.4
      STATEMENT_LIST
        STATEMENT
          ASSIGNMENT_STATEMENT Identifier: r2
            EXPRESSION
              TERM
                VALUE
                  CONSTANT
                    FLOATING_NEGATIVE_NUMBER_CONSTANT Number: -34.989
        STATEMENT_LIST
          STATEMENT
            ASSIGNMENT_STATEMENT Identifier: r3
              EXPRESSION
                TERM
                  TERM
                    TERM
                      VALUE Identifier: r1
                    VALUE Identifier: r2
                  VALUE
                    CONSTANT
                      FLOATING_NUMBER_CONSTANT Number: 7.4
          STATEMENT_LIST
            STATEMENT
              WRITE_STATEMENT
                OUTPUT_LIST
                  VALUE Identifier: r3
            STATEMENT_LIST
              STATEMENT
                WRITE_STATEMENT
              STATEMENT_LIST
                STATEMENT
                  READ_STATEMENT Identifier: r1
                STATEMENT_LIST
                  STATEMENT
                    ASSIGNMENT_STATEMENT Identifier: r3
                      EXPRESSION
                        EXPRESSION
                          TERM
                            VALUE Identifier: r1
                        TERM
                          VALUE Identifier: r3
                  STATEMENT_LIST
                    STATEMENT
                      WRITE_STATEMENT
                        OUTPUT_LIST
                          VALUE Identifier: r3
                    STATEMENT_LIST
                      STATEMENT
                        WRITE_STATEMENT

--02/12/2016----------------------------------------------------- 
Parse Tree output for e.spl 
-- 6:43:59.82----------------------------------------------------- 
PROGRAM Identifier: ProgV
  PROGRAM Identifier: ProgV
  BLOCK
    DECLARATION_LIST
      DECLARATION
        IDENTIFIER_LIST Identifier: i
          IDENTIFIER_LIST Identifier: integer
        TYPE_Y
    STATEMENT_LIST
      STATEMENT
        READ_STATEMENT Identifier: integer
      STATEMENT_LIST
        STATEMENT
          IF_STATEMENT
            CONDITIONAL_LIST
              CONDITIONAL
                EXPRESSION
                  TERM
                    VALUE Identifier: integer
                COMPARATOR
                EXPRESSION
                  TERM
                    VALUE
                      CONSTANT
                        NUMBER_CONSTANT Number: 5
              CONDITIONAL
                EXPRESSION
                  TERM
                    VALUE Identifier: integer
                COMPARATOR
                EXPRESSION
                  TERM
                    VALUE
                      CONSTANT
                        NUMBER_CONSTANT Number: 12
            STATEMENT_LIST
              STATEMENT
                WRITE_STATEMENT
                  OUTPUT_LIST
                    VALUE Identifier: integer
        STATEMENT_LIST
          STATEMENT
            WRITE_STATEMENT
              OUTPUT_LIST
                VALUE
                  EXPRESSION
                    EXPRESSION
                      TERM
                        VALUE
                          CONSTANT
                            NUMBER_CONSTANT Number: 36
                    TERM
                      VALUE
                        CONSTANT
                          NUMBER_CONSTANT Number: 1
          STATEMENT_LIST
            STATEMENT
              WRITE_STATEMENT
            STATEMENT_LIST
              STATEMENT
                FOR_STATEMENT Identifier: integer
                  FOR_STATEMENT
                    EXPRESSION
                      TERM
                        VALUE
                          CONSTANT
                            NEGATIVE_NUMBER_CONSTANT Number: -1
                    EXPRESSION
                      TERM
                        VALUE
                          CONSTANT
                            NEGATIVE_NUMBER_CONSTANT Number: -1
                    EXPRESSION
                      TERM
                        VALUE
                          CONSTANT
                            NEGATIVE_NUMBER_CONSTANT Number: -5
                  STATEMENT_LIST
                    STATEMENT
                      WRITE_STATEMENT
                        OUTPUT_LIST
                          VALUE Identifier: integer
                    STATEMENT_LIST
                      STATEMENT
                        WRITE_STATEMENT
              STATEMENT_LIST
                STATEMENT
                  ASSIGNMENT_STATEMENT Identifier: i
                    EXPRESSION
                      TERM
                        VALUE
                          CONSTANT
                            NEGATIVE_NUMBER_CONSTANT Number: -1
                STATEMENT_LIST
                  STATEMENT
                    FOR_STATEMENT Identifier: integer
                      FOR_STATEMENT
                        EXPRESSION
                          TERM
                            TERM
                              TERM
                                VALUE Identifier: i
                              VALUE Identifier: i
                            VALUE Identifier: i
                        EXPRESSION
                          TERM
                            TERM
                              TERM
                                TERM
                                  TERM
                                    VALUE Identifier: i
                                  VALUE Identifier: i
                                VALUE Identifier: i
                              VALUE Identifier: i
                            VALUE Identifier: i
                        EXPRESSION
                          TERM
                            TERM
                              TERM
                                VALUE Identifier: i
                              VALUE Identifier: i
                            VALUE
                              EXPRESSION
                                EXPRESSION
                                  EXPRESSION
                                    EXPRESSION
                                      EXPRESSION
                                        TERM
                                          VALUE Identifier: i
                                      TERM
                                        VALUE Identifier: i
                                    TERM
                                      VALUE Identifier: i
                                  TERM
                                    VALUE Identifier: i
                                TERM
                                  VALUE Identifier: i
                      STATEMENT_LIST
                        STATEMENT
                          WRITE_STATEMENT
                            OUTPUT_LIST
                              VALUE Identifier: integer
                        STATEMENT_LIST
                          STATEMENT
                            WRITE_STATEMENT

